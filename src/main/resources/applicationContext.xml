<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
		default-autowire="byName">
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:annotation-config />
	<context:component-scan base-package="cc.alpha" />

	<import resource="classpath:applicationContext-base.xml" />
	<import resource="classpath:applicationContext-druid.xml"/>
	<import resource="classpath:applicationContext-quratz.xml" />
	<import resource="classpath:applicationContext-datasource.xml" />
	<import resource="classpath:spring-mybatis.xml" />
	<import resource="classpath:spring-redis.xml" />
	
	<!-- jndi 数据源 配置 
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:/velcrods" />
	</bean>
	
	<bean id="dataSourcejms" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:/velcrojms" />
	</bean>
 	-->

	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="mappingDirectoryLocations">
		<list>
			<value>WEB-INF/mappings</value>
		</list>
		</property>
		<property name="hibernateProperties" ref="configProperties" />
	</bean>

	<aop:aspectj-autoproxy/>
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" p:sessionFactory-ref="sessionFactory" />

	<bean id="txProxyTemplate" abstract="true" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="search*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>	
	</bean>
	
	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:hibernate.properties</value>
				<value>classpath:mime.properties</value>
			</list>
		</property>
	</bean>  
	
	<!-- 配置PropertyPlaceholderConfigurer读取配置文件  -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="fileEncoding" value="UTF-8" />
		<property name="properties" ref="configProperties" />
		<!--设置systemPropertiesModeName为SYSTEM_PROPERTIES_MODE_OVERRIDE 打开允许覆盖 
		SystemPropertiesModeName属性用来指定系统变量（System.getProperty）是否覆盖proprties文件。
		默认是在配置文件里找不到时使用。
		三个选项分别是：
		SYSTEM_PROPERTIES_MODE_NEVER（不覆盖）
		SYSTEM_PROPERTIES_MODE_FALLBACK（默认值，不存在时覆盖）
		SYSTEM_PROPERTIES_MODE_OVERRIDE（覆盖）
		-->
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>

	<!-- 通过 spring.profiles.active 属性动态获取配置文件参数 -->
	<bean id="dynamicServerConfig" class="com.velcro.base.DynamicServerConfig">
		<property name="locations">
			<list>
				<value>classpath:config/server.dev.properties</value><!-- 开发 -->
				<value>classpath:config/server.test.properties</value><!-- 测试 -->
				<value>classpath:config/server.pro.properties</value><!-- 正式 -->
			</list>
		</property>
	</bean>

</beans>
